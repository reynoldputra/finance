// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/client"
  binaryTargets = ["native", "darwin", "darwin-arm64", "native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id              String            @id @default(cuid())
  nama            String            @unique @map("nama_customer")
  invoices        Invoice[]
  kolektorHistory KolektorHistory[]
  kolektorId      String

  currentKolektor Kolektor @relation(fields: [kolektorId], references: [id])
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
}

model KolektorHistory {
  id         String @id @default(cuid())
  customerId String
  kolektorId String

  customer  Customer @relation(fields: [customerId], references: [id])
  kolektor  Kolektor @relation(fields: [kolektorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("kolektor_history")
}

model Kolektor {
  id              String            @id @default(cuid())
  nama            String            @unique @map("nama_kolektor")
  customer        Customer[]
  kolektorHistory KolektorHistory[]
  penagihan       Penagihan[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Penagihan {
  id                   String                 @id @default(cuid())
  tanggalTagihan       DateTime               @map("tanggal_tagihan")
  invoiceId            String
  kolektorId           String
  distribusiPembayaran DistribusiPembayaran[]
  status               String
  keterangan           String?

  invoice  Invoice  @relation(fields: [invoiceId], references: [id])
  kolektor Kolektor @relation(fields: [kolektorId], references: [id])
}

model Invoice {
  id               String      @id @default(cuid())
  transaksiId      String      @unique @default(cuid())
  total            Int
  tanggalTransaksi DateTime    @map("tanggal_transaksi")
  namaSales        String      @map("nama_sales")
  penagihan        Penagihan[]
  customerId       String

  customer  Customer @relation(fields: [customerId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model DistribusiPembayaran {
  id          String @id @default(cuid())
  jumlah      Int
  caraBayarId String
  penagihanId String

  penagihan Penagihan @relation(fields: [penagihanId], references: [id])
  caraBayar CaraBayar @relation(fields: [caraBayarId], references: [id], onDelete: Cascade)

  @@map("distribusi_pembayaran")
}

model CaraBayar {
  id                   String                 @id @default(cuid())
  total                Int
  tandaTerima          Boolean                @map("tanda_terima")
  distribusiPembayaran DistribusiPembayaran[]
  metodePembayaranId   Int

  transfer  Transfer?
  giro      Giro?
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  metode    MetodePembayaran @relation(fields: [metodePembayaranId], references: [id])

  @@map("cara_bayar")
}

model MetodePembayaran {
  id    Int    @id @default(autoincrement())
  jenis String @unique

  caraBayar CaraBayar[]

  @@map("metode_pembayaran")
}

model Giro {
  id          String    @id @default(cuid())
  bank        String
  nomor       String
  jatuhTempo  DateTime  @map("jatuh_tempo")
  caraBayarId String    @unique
  caraBayar   CaraBayar @relation(fields: [caraBayarId], references: [id], onDelete: Cascade)
}

model Transfer {
  id          String    @id @default(cuid())
  tanggal     DateTime
  caraBayarId String    @unique
  caraBayar   CaraBayar @relation(fields: [caraBayarId], references: [id], onDelete: Cascade)
}
